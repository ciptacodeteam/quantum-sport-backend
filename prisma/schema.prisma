// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  googleId String? @unique

  phone         String   @unique
  phoneVerified Boolean?

  authTokens AuthToken[]

  @@map("user")
}

model PhoneVerification {
  id        String   @id @default(cuid())
  phone     String   @unique
  code      String
  expiresAt DateTime
  requestId String
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("phone_verification")
}

enum AuthTokenType {
  STAFF
  USER
}

model Staff {
  id        String   @id @default(cuid())
  image     String?
  name      String
  email     String   @unique
  phone     String   @unique
  password  String
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now())
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  authTokens AuthToken[]

  @@map("staff")
}

model AuthToken {
  id               String        @id @default(cuid())
  userId           String?
  staffId          String?
  type             AuthTokenType @default(USER)
  refreshToken     String        @unique
  refreshExpiresAt DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff Staff? @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("auth_token")
}

enum Role {
  ADMIN
  BALLBOY
  COACH
}

model InventoryItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  quantity    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  @@map("inventory_item")
}
