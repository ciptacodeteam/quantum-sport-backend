
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  image: 'image',
  googleId: 'googleId',
  phone: 'phone',
  phoneVerified: 'phoneVerified',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PhoneVerificationScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  type: 'type',
  code: 'code',
  expiresAt: 'expiresAt',
  requestId: 'requestId',
  isUsed: 'isUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  image: 'image',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  isActive: 'isActive',
  joinedAt: 'joinedAt',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  staffId: 'staffId',
  type: 'type',
  refreshToken: 'refreshToken',
  refreshExpiresAt: 'refreshExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  image: 'image',
  link: 'link',
  isActive: 'isActive',
  startAt: 'startAt',
  endAt: 'endAt',
  sequence: 'sequence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourtScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlotScalarFieldEnum = {
  id: 'id',
  type: 'type',
  courtId: 'courtId',
  staffId: 'staffId',
  startAt: 'startAt',
  endAt: 'endAt',
  price: 'price',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourtCostScheduleScalarFieldEnum = {
  id: 'id',
  courtId: 'courtId',
  startAt: 'startAt',
  endAt: 'endAt',
  price: 'price',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  fees: 'fees',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentMethodId: 'paymentMethodId',
  status: 'status',
  amount: 'amount',
  fees: 'fees',
  externalRef: 'externalRef',
  meta: 'meta',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  classBookingId: 'classBookingId',
  membershipUserId: 'membershipUserId',
  tournamentRegistrationId: 'tournamentRegistrationId',
  number: 'number',
  userId: 'userId',
  paymentId: 'paymentId',
  subtotal: 'subtotal',
  processingFee: 'processingFee',
  total: 'total',
  status: 'status',
  issuedAt: 'issuedAt',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  cancelledAt: 'cancelledAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  totalPrice: 'totalPrice',
  processingFee: 'processingFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  holdExpiresAt: 'holdExpiresAt',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason'
};

exports.Prisma.BookingDetailScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  slotId: 'slotId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  courtId: 'courtId'
};

exports.Prisma.BookingInventoryScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  inventoryId: 'inventoryId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingBallboyScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  slotId: 'slotId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingCoachTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoachTypeStaffPriceScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  coachTypeId: 'coachTypeId',
  basePrice: 'basePrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingCoachScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  slotId: 'slotId',
  bookingCoachTypeId: 'bookingCoachTypeId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  content: 'content',
  price: 'price',
  sessions: 'sessions',
  duration: 'duration',
  sequence: 'sequence',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipBenefitScalarFieldEnum = {
  id: 'id',
  membershipId: 'membershipId',
  benefit: 'benefit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  membershipId: 'membershipId',
  startDate: 'startDate',
  endDate: 'endDate',
  remainingSessions: 'remainingSessions',
  remainingDuration: 'remainingDuration',
  isExpired: 'isExpired',
  isSuspended: 'isSuspended',
  suspensionReason: 'suspensionReason',
  suspensionEndDate: 'suspensionEndDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  content: 'content',
  organizerName: 'organizerName',
  speakerName: 'speakerName',
  image: 'image',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  price: 'price',
  sessions: 'sessions',
  capacity: 'capacity',
  remaining: 'remaining',
  maxBookingPax: 'maxBookingPax',
  gender: 'gender',
  ageMin: 'ageMin',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassBookingScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  userId: 'userId',
  status: 'status',
  totalPrice: 'totalPrice',
  processingFee: 'processingFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason'
};

exports.Prisma.ClassBookingDetailScalarFieldEnum = {
  id: 'id',
  classBookingId: 'classBookingId',
  date: 'date',
  time: 'time',
  price: 'price',
  attendance: 'attendance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClubScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  description: 'description',
  rules: 'rules',
  leaderId: 'leaderId',
  visibility: 'visibility',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClubMemberScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rules: 'rules',
  image: 'image',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  maxTeams: 'maxTeams',
  teamSize: 'teamSize',
  entryFee: 'entryFee',
  location: 'location',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentRegistrationScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  clubId: 'clubId',
  members: 'members',
  totalFee: 'totalFee',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentLockedUntil: 'paymentLockedUntil',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason'
};

exports.Prisma.TournamentRegistrationMemberScalarFieldEnum = {
  id: 'id',
  tournamentRegistrationId: 'tournamentRegistrationId',
  userId: 'userId',
  isHost: 'isHost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PhoneVerificationType = exports.$Enums.PhoneVerificationType = {
  LOGIN: 'LOGIN',
  REGISTER: 'REGISTER',
  FORGOT_PASSWORD: 'FORGOT_PASSWORD',
  VERIFY_PHONE: 'VERIFY_PHONE',
  CHANGE_PHONE: 'CHANGE_PHONE'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  BALLBOY: 'BALLBOY',
  COACH: 'COACH'
};

exports.AuthTokenType = exports.$Enums.AuthTokenType = {
  STAFF: 'STAFF',
  USER: 'USER'
};

exports.SlotType = exports.$Enums.SlotType = {
  COURT: 'COURT',
  COACH: 'COACH',
  BALLBOY: 'BALLBOY'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  AWAITING_CONFIRMATION: 'AWAITING_CONFIRMATION',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  REFUNDED: 'REFUNDED'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  DRAFT: 'DRAFT',
  HOLD: 'HOLD',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  ALL: 'ALL'
};

exports.ClubVisibility = exports.$Enums.ClubVisibility = {
  PRIVATE: 'PRIVATE',
  PUBLIC: 'PUBLIC'
};

exports.Prisma.ModelName = {
  User: 'User',
  PhoneVerification: 'PhoneVerification',
  Staff: 'Staff',
  AuthToken: 'AuthToken',
  Banner: 'Banner',
  Court: 'Court',
  Inventory: 'Inventory',
  Slot: 'Slot',
  CourtCostSchedule: 'CourtCostSchedule',
  PaymentMethod: 'PaymentMethod',
  Payment: 'Payment',
  Invoice: 'Invoice',
  Booking: 'Booking',
  BookingDetail: 'BookingDetail',
  BookingInventory: 'BookingInventory',
  BookingBallboy: 'BookingBallboy',
  BookingCoachType: 'BookingCoachType',
  CoachTypeStaffPrice: 'CoachTypeStaffPrice',
  BookingCoach: 'BookingCoach',
  Membership: 'Membership',
  MembershipBenefit: 'MembershipBenefit',
  MembershipUser: 'MembershipUser',
  Class: 'Class',
  ClassBooking: 'ClassBooking',
  ClassBookingDetail: 'ClassBookingDetail',
  Club: 'Club',
  ClubMember: 'ClubMember',
  Tournament: 'Tournament',
  TournamentRegistration: 'TournamentRegistration',
  TournamentRegistrationMember: 'TournamentRegistrationMember'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
