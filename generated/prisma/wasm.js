
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  password: 'password',
  image: 'image',
  googleId: 'googleId',
  phone: 'phone',
  phoneVerified: 'phoneVerified',
  banned: 'banned',
  banReason: 'banReason',
  banExpires: 'banExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PhoneVerificationScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  type: 'type',
  code: 'code',
  expiresAt: 'expiresAt',
  requestId: 'requestId',
  isUsed: 'isUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  image: 'image',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  isActive: 'isActive',
  joinedAt: 'joinedAt',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuthTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  staffId: 'staffId',
  type: 'type',
  refreshToken: 'refreshToken',
  refreshExpiresAt: 'refreshExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  image: 'image',
  link: 'link',
  isActive: 'isActive',
  startAt: 'startAt',
  endAt: 'endAt',
  sequence: 'sequence',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourtScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlotScalarFieldEnum = {
  id: 'id',
  type: 'type',
  courtId: 'courtId',
  staffId: 'staffId',
  startAt: 'startAt',
  endAt: 'endAt',
  price: 'price',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourtCostScheduleScalarFieldEnum = {
  id: 'id',
  courtId: 'courtId',
  startAt: 'startAt',
  endAt: 'endAt',
  price: 'price',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  fees: 'fees',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  paymentMethodId: 'paymentMethodId',
  status: 'status',
  amount: 'amount',
  fees: 'fees',
  externalRef: 'externalRef',
  meta: 'meta',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  classBookingId: 'classBookingId',
  membershipUserId: 'membershipUserId',
  tournamentRegistrationId: 'tournamentRegistrationId',
  number: 'number',
  userId: 'userId',
  paymentId: 'paymentId',
  subtotal: 'subtotal',
  processingFee: 'processingFee',
  total: 'total',
  status: 'status',
  issuedAt: 'issuedAt',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  cancelledAt: 'cancelledAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  totalPrice: 'totalPrice',
  processingFee: 'processingFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  holdExpiresAt: 'holdExpiresAt',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason'
};

exports.Prisma.BookingDetailScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  slotId: 'slotId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  courtId: 'courtId'
};

exports.Prisma.BookingInventoryScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  inventoryId: 'inventoryId',
  quantity: 'quantity',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingBallboyScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  slotId: 'slotId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingCoachTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CoachTypeStaffPriceScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  coachTypeId: 'coachTypeId',
  basePrice: 'basePrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BookingCoachScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  slotId: 'slotId',
  bookingCoachTypeId: 'bookingCoachTypeId',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  content: 'content',
  price: 'price',
  sessions: 'sessions',
  duration: 'duration',
  sequence: 'sequence',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipBenefitScalarFieldEnum = {
  id: 'id',
  membershipId: 'membershipId',
  benefit: 'benefit',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MembershipUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  membershipId: 'membershipId',
  startDate: 'startDate',
  endDate: 'endDate',
  remainingSessions: 'remainingSessions',
  remainingDuration: 'remainingDuration',
  isExpired: 'isExpired',
  isSuspended: 'isSuspended',
  suspensionReason: 'suspensionReason',
  suspensionEndDate: 'suspensionEndDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  content: 'content',
  organizerName: 'organizerName',
  speakerName: 'speakerName',
  image: 'image',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  price: 'price',
  sessions: 'sessions',
  capacity: 'capacity',
  remaining: 'remaining',
  maxBookingPax: 'maxBookingPax',
  gender: 'gender',
  ageMin: 'ageMin',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassBookingScalarFieldEnum = {
  id: 'id',
  classId: 'classId',
  userId: 'userId',
  status: 'status',
  totalPrice: 'totalPrice',
  processingFee: 'processingFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason'
};

exports.Prisma.ClassBookingDetailScalarFieldEnum = {
  id: 'id',
  classBookingId: 'classBookingId',
  date: 'date',
  time: 'time',
  price: 'price',
  attendance: 'attendance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClubScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  description: 'description',
  rules: 'rules',
  leaderId: 'leaderId',
  visibility: 'visibility',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClubMemberScalarFieldEnum = {
  id: 'id',
  clubId: 'clubId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  rules: 'rules',
  image: 'image',
  startDate: 'startDate',
  endDate: 'endDate',
  startTime: 'startTime',
  endTime: 'endTime',
  maxTeams: 'maxTeams',
  teamSize: 'teamSize',
  entryFee: 'entryFee',
  location: 'location',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TournamentRegistrationScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  clubId: 'clubId',
  members: 'members',
  totalFee: 'totalFee',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  paymentLockedUntil: 'paymentLockedUntil',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason'
};

exports.Prisma.TournamentRegistrationMemberScalarFieldEnum = {
  id: 'id',
  tournamentRegistrationId: 'tournamentRegistrationId',
  userId: 'userId',
  isHost: 'isHost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  BALLBOY: 'BALLBOY',
  COACH: 'COACH'
};

exports.PhoneVerificationType = exports.$Enums.PhoneVerificationType = {
  LOGIN: 'LOGIN',
  REGISTER: 'REGISTER',
  FORGOT_PASSWORD: 'FORGOT_PASSWORD',
  VERIFY_PHONE: 'VERIFY_PHONE',
  CHANGE_PHONE: 'CHANGE_PHONE'
};

exports.AuthTokenType = exports.$Enums.AuthTokenType = {
  STAFF: 'STAFF',
  USER: 'USER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  AWAITING_CONFIRMATION: 'AWAITING_CONFIRMATION',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED',
  REFUNDED: 'REFUNDED'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  DRAFT: 'DRAFT',
  HOLD: 'HOLD',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED'
};

exports.SlotType = exports.$Enums.SlotType = {
  COURT: 'COURT',
  COACH: 'COACH',
  BALLBOY: 'BALLBOY'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  ALL: 'ALL'
};

exports.ClubVisibility = exports.$Enums.ClubVisibility = {
  PRIVATE: 'PRIVATE',
  PUBLIC: 'PUBLIC'
};

exports.Prisma.ModelName = {
  User: 'User',
  PhoneVerification: 'PhoneVerification',
  Staff: 'Staff',
  AuthToken: 'AuthToken',
  Banner: 'Banner',
  Court: 'Court',
  Inventory: 'Inventory',
  Slot: 'Slot',
  CourtCostSchedule: 'CourtCostSchedule',
  PaymentMethod: 'PaymentMethod',
  Payment: 'Payment',
  Invoice: 'Invoice',
  Booking: 'Booking',
  BookingDetail: 'BookingDetail',
  BookingInventory: 'BookingInventory',
  BookingBallboy: 'BookingBallboy',
  BookingCoachType: 'BookingCoachType',
  CoachTypeStaffPrice: 'CoachTypeStaffPrice',
  BookingCoach: 'BookingCoach',
  Membership: 'Membership',
  MembershipBenefit: 'MembershipBenefit',
  MembershipUser: 'MembershipUser',
  Class: 'Class',
  ClassBooking: 'ClassBooking',
  ClassBookingDetail: 'ClassBookingDetail',
  Club: 'Club',
  ClubMember: 'ClubMember',
  Tournament: 'Tournament',
  TournamentRegistration: 'TournamentRegistration',
  TournamentRegistrationMember: 'TournamentRegistrationMember'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\randy\\Documents\\programming\\quantum-sport-backend\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\randy\\Documents\\programming\\quantum-sport-backend\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// ------------------------------\n// Prisma Generators & Datasource\n// ------------------------------\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// ------------------------------\n// Common Enums\n// ------------------------------\nenum Role {\n  ADMIN\n  BALLBOY\n  COACH\n}\n\nenum PhoneVerificationType {\n  LOGIN\n  REGISTER\n  FORGOT_PASSWORD\n  VERIFY_PHONE\n  CHANGE_PHONE\n}\n\nenum AuthTokenType {\n  STAFF\n  USER\n}\n\nenum PaymentStatus {\n  PENDING\n  AWAITING_CONFIRMATION // created but not paid (e.g., VA issued)\n  PAID // paid & captured/settled by gateway\n  CANCELLED\n  EXPIRED\n  REFUNDED\n}\n\nenum BookingStatus {\n  DRAFT // cart-like pre-checkout\n  HOLD // temporary hold on slots before payment (expiry)\n  CONFIRMED // paid; slots locked\n  CANCELLED\n}\n\nenum SlotType {\n  COURT\n  COACH\n  BALLBOY\n}\n\nenum Gender {\n  MALE\n  FEMALE\n  ALL\n}\n\nenum ClubVisibility {\n  PRIVATE\n  PUBLIC\n}\n\n// ------------------------------\n// Users & Auth\n// ------------------------------\nmodel User {\n  id            String  @id @default(cuid())\n  name          String\n  email         String? @unique\n  emailVerified Boolean @default(false)\n  password      String?\n  image         String?\n  googleId      String? @unique\n\n  phone         String  @unique\n  phoneVerified Boolean @default(false)\n\n  banned     Boolean   @default(false)\n  banReason  String?\n  banExpires DateTime?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  authTokens                   AuthToken[]\n  bookings                     Booking[]\n  membershipUser               MembershipUser[]\n  classBookings                ClassBooking[]\n  clubsLed                     Club[]                         @relation(\"ClubLeader\")\n  clubMember                   ClubMember[]\n  tournamentRegistrationMember TournamentRegistrationMember[]\n  invoice                      Invoice[]\n\n  @@map(\"user\")\n}\n\nmodel PhoneVerification {\n  id        String                 @id @default(cuid())\n  phone     String                 @unique\n  type      PhoneVerificationType?\n  code      String\n  expiresAt DateTime\n  requestId String\n  isUsed    Boolean                @default(false)\n  createdAt DateTime               @default(now())\n  updatedAt DateTime               @default(now()) @updatedAt\n\n  @@map(\"phone_verification\")\n}\n\nmodel Staff {\n  id        String   @id @default(cuid())\n  image     String?\n  name      String\n  email     String   @unique\n  phone     String?  @unique\n  password  String\n  isActive  Boolean  @default(true)\n  joinedAt  DateTime @default(now()) @db.Date\n  role      Role     @default(ADMIN)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  authTokens          AuthToken[]\n  // Derived schedules now use Slot (see below) instead of separate tables\n  slot                Slot[]\n  coachTypeStaffPrice CoachTypeStaffPrice[]\n\n  @@map(\"staff\")\n}\n\nmodel AuthToken {\n  id               String        @id @default(cuid())\n  userId           String?\n  staffId          String?\n  type             AuthTokenType @default(USER)\n  refreshToken     String        @unique\n  refreshExpiresAt DateTime\n  createdAt        DateTime      @default(now())\n  updatedAt        DateTime      @default(now()) @updatedAt\n\n  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)\n  staff Staff? @relation(fields: [staffId], references: [id], onDelete: Cascade)\n\n  @@map(\"auth_token\")\n}\n\n// ------------------------------\n// Catalogs / Content\n// ------------------------------\nmodel Banner {\n  id        String    @id @default(cuid())\n  image     String\n  link      String?\n  isActive  Boolean   @default(true)\n  startAt   DateTime?\n  endAt     DateTime?\n  sequence  Int       @default(0)\n  createdAt DateTime  @default(now())\n  updatedAt DateTime  @default(now()) @updatedAt\n\n  @@index([isActive, startAt, endAt, sequence])\n  @@map(\"banners\")\n}\n\nmodel Court {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  image       String?\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  costSchedules CourtCostSchedule[]\n  bookingDetail BookingDetail[]\n  slot          Slot[]\n\n  @@unique([name])\n  @@index([isActive])\n  @@map(\"courts\")\n}\n\nmodel Inventory {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  quantity    Int      @default(0) // stock on hand\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  bookingInventory BookingInventory[]\n\n  @@unique([name])\n  @@index([isActive])\n  @@map(\"inventories\")\n}\n\n// ------------------------------\n// Scheduling (Unified Slot model)\n// ------------------------------\n// All “time grids” (court / coach / ballboy) are modeled as Slots with start/end times.\n// Non-overlap is enforced via unique constraints per resource.\n\nmodel Slot {\n  id          String   @id @default(cuid())\n  type        SlotType\n  // Resource pointers (exactly one must be set depending on type)\n  courtId     String?\n  staffId     String? // for COACH or BALLBOY\n  // The actual time window (timestamptz)\n  startAt     DateTime\n  endAt       DateTime\n  price       Int      @default(0) @db.Integer // in rupiah, 0 for free/ballboy if bundled\n  isAvailable Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  court Court? @relation(fields: [courtId], references: [id])\n  staff Staff? @relation(fields: [staffId], references: [id])\n\n  bookingDetails  BookingDetail[] // court slots\n  bookingCoaches  BookingCoach[] // coach slots\n  bookingBallboys BookingBallboy[] // ballboy slots\n\n  // Prevent overlaps per resource+time window:\n  // (Postgres cannot enforce “no overlap” via Prisma directly; we simulate with unique composite on (resource, startAt))\n  @@unique([courtId, startAt], map: \"uq_court_slot_start\") // for COURT\n  @@unique([staffId, startAt], map: \"uq_staff_slot_start\") // for COACH/BALLBOY\n  @@index([type, startAt, endAt, isAvailable])\n  @@map(\"slots\")\n}\n\n// Legacy CourtCostSchedule kept as a published price table (optional)\n// Often still useful for “price calendar” UIs and batch slot generation.\nmodel CourtCostSchedule {\n  id          String   @id @default(cuid())\n  courtId     String\n  // For a whole-day price grid (e.g., 08:00-09:00), store range:\n  startAt     DateTime\n  endAt       DateTime\n  price       Int      @db.Integer\n  isAvailable Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  court Court @relation(fields: [courtId], references: [id])\n\n  @@unique([courtId, startAt], map: \"uq_court_cost_start\")\n  @@index([courtId, startAt, endAt, isAvailable])\n  @@map(\"court_cost_schedules\")\n}\n\n// ------------------------------\n// Payments & Invoices\n// ------------------------------\nmodel PaymentMethod {\n  id        String   @id @default(cuid())\n  name      String\n  logo      String?\n  fees      Int      @default(0) @db.Integer // fixed fee (rupiah)\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  payments Payment[]\n\n  @@unique([name])\n  @@index([isActive])\n  @@map(\"payment_methods\")\n}\n\nmodel Payment {\n  id              String        @id @default(cuid())\n  paymentMethodId String\n  status          PaymentStatus @default(PENDING)\n  amount          Int           @db.Integer // total amount requested\n  fees            Int           @default(0) @db.Integer // gateway/admin fees recorded\n  externalRef     String?       @unique // gateway transaction id / VA number, etc.\n  meta            Json? // raw payloads or gateway-specific fields\n  dueDate         DateTime?\n  paidAt          DateTime?\n  cancelledAt     DateTime?\n  createdAt       DateTime      @default(now())\n  updatedAt       DateTime      @default(now()) @updatedAt\n\n  method  PaymentMethod @relation(fields: [paymentMethodId], references: [id])\n  invoice Invoice?\n\n  @@index([status, dueDate])\n  @@map(\"payments\")\n}\n\nmodel Invoice {\n  id                       String  @id @default(cuid())\n  // Polymorphic linkage via nullable FKs (exactly one must be set)\n  bookingId                String? @unique\n  classBookingId           String? @unique\n  membershipUserId         String? @unique\n  tournamentRegistrationId String? @unique\n\n  number        String        @unique // human-readable invoice no\n  userId        String\n  paymentId     String?       @unique\n  subtotal      Int           @db.Integer\n  processingFee Int           @default(0) @db.Integer\n  total         Int           @db.Integer\n  status        PaymentStatus @default(PENDING)\n\n  issuedAt    DateTime  @default(now())\n  dueDate     DateTime\n  paidAt      DateTime?\n  cancelledAt DateTime?\n\n  user                   User                    @relation(fields: [userId], references: [id])\n  payment                Payment?                @relation(fields: [paymentId], references: [id])\n  booking                Booking?                @relation(fields: [bookingId], references: [id])\n  classBooking           ClassBooking?           @relation(fields: [classBookingId], references: [id])\n  membershipUser         MembershipUser?         @relation(fields: [membershipUserId], references: [id])\n  tournamentRegistration TournamentRegistration? @relation(fields: [tournamentRegistrationId], references: [id])\n\n  @@index([status, dueDate])\n  @@map(\"invoices\")\n}\n\n// ------------------------------\n// Booking (Courts + optional add-ons)\n// ------------------------------\nmodel Booking {\n  id                 String        @id @default(cuid())\n  userId             String\n  status             BookingStatus @default(DRAFT)\n  totalPrice         Int           @default(0) @db.Integer\n  processingFee      Int           @default(0) @db.Integer\n  createdAt          DateTime      @default(now())\n  updatedAt          DateTime      @default(now()) @updatedAt\n  holdExpiresAt      DateTime? // for HOLD; auto-release slots when passed\n  cancelledAt        DateTime?\n  cancellationReason String?\n\n  user        User               @relation(fields: [userId], references: [id])\n  details     BookingDetail[]\n  inventories BookingInventory[]\n  ballboys    BookingBallboy[]\n  coaches     BookingCoach[]\n  invoice     Invoice?\n\n  @@index([userId, status, createdAt])\n  @@map(\"bookings\")\n}\n\nmodel BookingDetail {\n  id        String @id @default(cuid())\n  bookingId String\n  slotId    String // COURT slot\n  price     Int    @db.Integer\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  slot    Slot    @relation(fields: [slotId], references: [id])\n  court   Court?  @relation(fields: [courtId], references: [id])\n  courtId String?\n\n  // Ensure a court slot is not double-booked:\n  @@unique([slotId], map: \"uq_bookingdetail_slot\")\n  @@map(\"booking_details\")\n}\n\nmodel BookingInventory {\n  id          String   @id @default(cuid())\n  bookingId   String\n  inventoryId String\n  quantity    Int      @default(1)\n  price       Int      @default(0) @db.Integer // unit price captured at checkout\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  inventory Inventory @relation(fields: [inventoryId], references: [id])\n\n  @@index([bookingId])\n  @@map(\"booking_inventories\")\n}\n\nmodel BookingBallboy {\n  id        String   @id @default(cuid())\n  bookingId String\n  slotId    String // BALLBOY slot\n  price     Int      @default(0) @db.Integer\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  slot    Slot    @relation(fields: [slotId], references: [id])\n\n  @@unique([slotId], map: \"uq_bookingballboy_slot\")\n  @@map(\"booking_ballboys\")\n}\n\nmodel BookingCoachType {\n  id          String   @id @default(cuid())\n  name        String // e.g., \"guided match\" or \"personal training\"\n  description String?\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  bookingCoach        BookingCoach[]\n  coachTypeStaffPrice CoachTypeStaffPrice[]\n\n  @@unique([name])\n  @@index([isActive])\n  @@map(\"coach_types\")\n}\n\nmodel CoachTypeStaffPrice {\n  id          String   @id @default(cuid())\n  staffId     String\n  coachTypeId String\n  basePrice   BigInt\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  staff     Staff            @relation(fields: [staffId], references: [id], onDelete: Cascade)\n  coachType BookingCoachType @relation(fields: [coachTypeId], references: [id], onDelete: Cascade)\n\n  @@unique([staffId, coachTypeId], map: \"uq_staff_coachtype_price\")\n  @@map(\"coach_type_staff_prices\")\n}\n\nmodel BookingCoach {\n  id                 String   @id @default(cuid())\n  bookingId          String\n  slotId             String // COACH slot\n  bookingCoachTypeId String\n  price              Int      @db.Integer\n  createdAt          DateTime @default(now())\n  updatedAt          DateTime @default(now()) @updatedAt\n\n  booking          Booking          @relation(fields: [bookingId], references: [id], onDelete: Cascade)\n  slot             Slot             @relation(fields: [slotId], references: [id])\n  bookingCoachType BookingCoachType @relation(fields: [bookingCoachTypeId], references: [id])\n\n  @@unique([slotId], map: \"uq_bookingcoach_slot\")\n  @@map(\"booking_coaches\")\n}\n\n// ------------------------------\n// Membership\n// ------------------------------\nmodel Membership {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  content     String?\n  price       Int      @db.Integer\n  sessions    Int\n  duration    Int // days\n  sequence    Int      @default(0)\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @default(now()) @updatedAt\n\n  benefits       MembershipBenefit[]\n  membershipUser MembershipUser[]\n\n  @@unique([name])\n  @@index([isActive, sequence])\n  @@map(\"memberships\")\n}\n\nmodel MembershipBenefit {\n  id           String   @id @default(cuid())\n  membershipId String\n  benefit      String\n  createdAt    DateTime @default(now())\n  updatedAt    DateTime @default(now()) @updatedAt\n\n  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)\n\n  @@map(\"membership_benefits\")\n}\n\nmodel MembershipUser {\n  id                String    @id @default(cuid())\n  userId            String\n  membershipId      String\n  startDate         DateTime\n  endDate           DateTime\n  remainingSessions Int\n  remainingDuration Int\n  isExpired         Boolean   @default(false)\n  isSuspended       Boolean   @default(false)\n  suspensionReason  String?\n  suspensionEndDate DateTime?\n  createdAt         DateTime  @default(now())\n  updatedAt         DateTime  @default(now()) @updatedAt\n\n  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)\n  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)\n  invoice    Invoice?\n\n  @@index([userId, isExpired, isSuspended])\n  @@map(\"membership_users\")\n}\n\n// ------------------------------\n// Class\n// ------------------------------\nmodel Class {\n  id            String   @id @default(cuid())\n  name          String\n  description   String?\n  content       String?\n  organizerName String?\n  speakerName   String?\n  image         String?\n  startDate     DateTime @db.Date\n  endDate       DateTime @db.Date\n  startTime     String\n  endTime       String\n  price         Int      @db.Integer\n  sessions      Int\n  capacity      Int\n  remaining     Int\n  maxBookingPax Int      @default(0)\n  gender        Gender   @default(ALL)\n  ageMin        Int\n  isActive      Boolean  @default(true)\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @default(now()) @updatedAt\n\n  classBookings ClassBooking[]\n\n  @@index([isActive, startDate, endDate])\n  @@map(\"classes\")\n}\n\nmodel ClassBooking {\n  id                 String        @id @default(cuid())\n  classId            String\n  userId             String\n  status             BookingStatus @default(DRAFT)\n  totalPrice         Int           @db.Integer\n  processingFee      Int           @default(0) @db.Integer\n  createdAt          DateTime      @default(now())\n  updatedAt          DateTime      @default(now()) @updatedAt\n  cancelledAt        DateTime?\n  cancellationReason String?\n\n  class   Class                @relation(fields: [classId], references: [id])\n  user    User                 @relation(fields: [userId], references: [id])\n  details ClassBookingDetail[]\n  invoice Invoice?\n\n  @@index([userId, status, createdAt])\n  @@map(\"class_bookings\")\n}\n\nmodel ClassBookingDetail {\n  id             String   @id @default(cuid())\n  classBookingId String\n  date           DateTime @db.Date\n  time           String\n  price          Int      @db.Integer\n  attendance     Boolean  @default(false)\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @default(now()) @updatedAt\n\n  classBooking ClassBooking @relation(fields: [classBookingId], references: [id], onDelete: Cascade)\n\n  @@map(\"class_booking_details\")\n}\n\n// ------------------------------\n// Club & Tournament\n// ------------------------------\nmodel Club {\n  id          String         @id @default(cuid())\n  name        String\n  logo        String?\n  description String?\n  rules       String?\n  leaderId    String\n  visibility  ClubVisibility @default(PUBLIC)\n  isActive    Boolean        @default(true)\n  createdAt   DateTime       @default(now())\n  updatedAt   DateTime       @default(now()) @updatedAt\n\n  leader                 User                     @relation(\"ClubLeader\", fields: [leaderId], references: [id])\n  clubMember             ClubMember[]\n  tournamentRegistration TournamentRegistration[]\n\n  @@unique([name])\n  @@index([visibility, isActive])\n  @@map(\"clubs\")\n}\n\nmodel ClubMember {\n  id        String   @id @default(cuid())\n  clubId    String\n  userId    String\n  joinedAt  DateTime @default(now())\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @default(now()) @updatedAt\n\n  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([clubId, userId])\n  @@map(\"club_members\")\n}\n\nmodel Tournament {\n  id                     String                   @id @default(cuid())\n  name                   String\n  description            String?\n  rules                  String?\n  image                  String?\n  startDate              DateTime                 @db.Date\n  endDate                DateTime                 @db.Date\n  startTime              String\n  endTime                String\n  maxTeams               Int\n  teamSize               Int\n  entryFee               Int                      @db.Integer\n  location               String\n  isActive               Boolean                  @default(true)\n  createdAt              DateTime                 @default(now())\n  updatedAt              DateTime                 @default(now()) @updatedAt\n  tournamentRegistration TournamentRegistration[]\n\n  @@index([isActive, startDate, endDate])\n  @@map(\"tournaments\")\n}\n\nmodel TournamentRegistration {\n  id                 String        @id @default(cuid())\n  tournamentId       String\n  clubId             String\n  members            Int\n  totalFee           Int           @db.Integer\n  status             BookingStatus @default(DRAFT)\n  createdAt          DateTime      @default(now())\n  updatedAt          DateTime      @default(now()) @updatedAt\n  paymentLockedUntil DateTime? // soft hold for payment window\n  cancelledAt        DateTime?\n  cancellationReason String?\n\n  tournament Tournament                     @relation(fields: [tournamentId], references: [id], onDelete: Cascade)\n  club       Club                           @relation(fields: [clubId], references: [id], onDelete: Cascade)\n  membersRef TournamentRegistrationMember[]\n  invoice    Invoice?\n\n  @@index([clubId, status, createdAt])\n  @@map(\"tournament_registrations\")\n}\n\nmodel TournamentRegistrationMember {\n  id                       String   @id @default(cuid())\n  tournamentRegistrationId String\n  userId                   String\n  isHost                   Boolean  @default(false)\n  createdAt                DateTime @default(now())\n  updatedAt                DateTime @default(now()) @updatedAt\n\n  tournamentRegistration TournamentRegistration @relation(fields: [tournamentRegistrationId], references: [id], onDelete: Cascade)\n  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([tournamentRegistrationId, userId])\n  @@map(\"tournament_registration_members\")\n}\n",
  "inlineSchemaHash": "810578036c7ef93f1912b8977cbb34593858bed4a938f61702bd601527805706",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"banned\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"banReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"banExpires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"authTokens\",\"kind\":\"object\",\"type\":\"AuthToken\",\"relationName\":\"AuthTokenToUser\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToUser\"},{\"name\":\"membershipUser\",\"kind\":\"object\",\"type\":\"MembershipUser\",\"relationName\":\"MembershipUserToUser\"},{\"name\":\"classBookings\",\"kind\":\"object\",\"type\":\"ClassBooking\",\"relationName\":\"ClassBookingToUser\"},{\"name\":\"clubsLed\",\"kind\":\"object\",\"type\":\"Club\",\"relationName\":\"ClubLeader\"},{\"name\":\"clubMember\",\"kind\":\"object\",\"type\":\"ClubMember\",\"relationName\":\"ClubMemberToUser\"},{\"name\":\"tournamentRegistrationMember\",\"kind\":\"object\",\"type\":\"TournamentRegistrationMember\",\"relationName\":\"TournamentRegistrationMemberToUser\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"InvoiceToUser\"}],\"dbName\":\"user\"},\"PhoneVerification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"PhoneVerificationType\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"requestId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isUsed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"phone_verification\"},\"Staff\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"Role\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"authTokens\",\"kind\":\"object\",\"type\":\"AuthToken\",\"relationName\":\"AuthTokenToStaff\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"Slot\",\"relationName\":\"SlotToStaff\"},{\"name\":\"coachTypeStaffPrice\",\"kind\":\"object\",\"type\":\"CoachTypeStaffPrice\",\"relationName\":\"CoachTypeStaffPriceToStaff\"}],\"dbName\":\"staff\"},\"AuthToken\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"staffId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"AuthTokenType\"},{\"name\":\"refreshToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refreshExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AuthTokenToUser\"},{\"name\":\"staff\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"AuthTokenToStaff\"}],\"dbName\":\"auth_token\"},\"Banner\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"link\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"startAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sequence\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"banners\"},\"Court\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"costSchedules\",\"kind\":\"object\",\"type\":\"CourtCostSchedule\",\"relationName\":\"CourtToCourtCostSchedule\"},{\"name\":\"bookingDetail\",\"kind\":\"object\",\"type\":\"BookingDetail\",\"relationName\":\"BookingDetailToCourt\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"Slot\",\"relationName\":\"CourtToSlot\"}],\"dbName\":\"courts\"},\"Inventory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"bookingInventory\",\"kind\":\"object\",\"type\":\"BookingInventory\",\"relationName\":\"BookingInventoryToInventory\"}],\"dbName\":\"inventories\"},\"Slot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"SlotType\"},{\"name\":\"courtId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"staffId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isAvailable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"court\",\"kind\":\"object\",\"type\":\"Court\",\"relationName\":\"CourtToSlot\"},{\"name\":\"staff\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"SlotToStaff\"},{\"name\":\"bookingDetails\",\"kind\":\"object\",\"type\":\"BookingDetail\",\"relationName\":\"BookingDetailToSlot\"},{\"name\":\"bookingCoaches\",\"kind\":\"object\",\"type\":\"BookingCoach\",\"relationName\":\"BookingCoachToSlot\"},{\"name\":\"bookingBallboys\",\"kind\":\"object\",\"type\":\"BookingBallboy\",\"relationName\":\"BookingBallboyToSlot\"}],\"dbName\":\"slots\"},\"CourtCostSchedule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"courtId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isAvailable\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"court\",\"kind\":\"object\",\"type\":\"Court\",\"relationName\":\"CourtToCourtCostSchedule\"}],\"dbName\":\"court_cost_schedules\"},\"PaymentMethod\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fees\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToPaymentMethod\"}],\"dbName\":\"payment_methods\"},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentMethodId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"fees\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"externalRef\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"method\",\"kind\":\"object\",\"type\":\"PaymentMethod\",\"relationName\":\"PaymentToPaymentMethod\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"InvoiceToPayment\"}],\"dbName\":\"payments\"},\"Invoice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classBookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"membershipUserId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tournamentRegistrationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"number\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"subtotal\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"processingFee\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"total\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"issuedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"dueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"paidAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"InvoiceToUser\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"InvoiceToPayment\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToInvoice\"},{\"name\":\"classBooking\",\"kind\":\"object\",\"type\":\"ClassBooking\",\"relationName\":\"ClassBookingToInvoice\"},{\"name\":\"membershipUser\",\"kind\":\"object\",\"type\":\"MembershipUser\",\"relationName\":\"InvoiceToMembershipUser\"},{\"name\":\"tournamentRegistration\",\"kind\":\"object\",\"type\":\"TournamentRegistration\",\"relationName\":\"InvoiceToTournamentRegistration\"}],\"dbName\":\"invoices\"},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"totalPrice\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"processingFee\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"holdExpiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancellationReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BookingToUser\"},{\"name\":\"details\",\"kind\":\"object\",\"type\":\"BookingDetail\",\"relationName\":\"BookingToBookingDetail\"},{\"name\":\"inventories\",\"kind\":\"object\",\"type\":\"BookingInventory\",\"relationName\":\"BookingToBookingInventory\"},{\"name\":\"ballboys\",\"kind\":\"object\",\"type\":\"BookingBallboy\",\"relationName\":\"BookingToBookingBallboy\"},{\"name\":\"coaches\",\"kind\":\"object\",\"type\":\"BookingCoach\",\"relationName\":\"BookingToBookingCoach\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"BookingToInvoice\"}],\"dbName\":\"bookings\"},\"BookingDetail\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slotId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToBookingDetail\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"Slot\",\"relationName\":\"BookingDetailToSlot\"},{\"name\":\"court\",\"kind\":\"object\",\"type\":\"Court\",\"relationName\":\"BookingDetailToCourt\"},{\"name\":\"courtId\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"booking_details\"},\"BookingInventory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"inventoryId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToBookingInventory\"},{\"name\":\"inventory\",\"kind\":\"object\",\"type\":\"Inventory\",\"relationName\":\"BookingInventoryToInventory\"}],\"dbName\":\"booking_inventories\"},\"BookingBallboy\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slotId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToBookingBallboy\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"Slot\",\"relationName\":\"BookingBallboyToSlot\"}],\"dbName\":\"booking_ballboys\"},\"BookingCoachType\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"bookingCoach\",\"kind\":\"object\",\"type\":\"BookingCoach\",\"relationName\":\"BookingCoachToBookingCoachType\"},{\"name\":\"coachTypeStaffPrice\",\"kind\":\"object\",\"type\":\"CoachTypeStaffPrice\",\"relationName\":\"BookingCoachTypeToCoachTypeStaffPrice\"}],\"dbName\":\"coach_types\"},\"CoachTypeStaffPrice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"staffId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"coachTypeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"basePrice\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"staff\",\"kind\":\"object\",\"type\":\"Staff\",\"relationName\":\"CoachTypeStaffPriceToStaff\"},{\"name\":\"coachType\",\"kind\":\"object\",\"type\":\"BookingCoachType\",\"relationName\":\"BookingCoachTypeToCoachTypeStaffPrice\"}],\"dbName\":\"coach_type_staff_prices\"},\"BookingCoach\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slotId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingCoachTypeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToBookingCoach\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"Slot\",\"relationName\":\"BookingCoachToSlot\"},{\"name\":\"bookingCoachType\",\"kind\":\"object\",\"type\":\"BookingCoachType\",\"relationName\":\"BookingCoachToBookingCoachType\"}],\"dbName\":\"booking_coaches\"},\"Membership\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sessions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sequence\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"benefits\",\"kind\":\"object\",\"type\":\"MembershipBenefit\",\"relationName\":\"MembershipToMembershipBenefit\"},{\"name\":\"membershipUser\",\"kind\":\"object\",\"type\":\"MembershipUser\",\"relationName\":\"MembershipToMembershipUser\"}],\"dbName\":\"memberships\"},\"MembershipBenefit\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"membershipId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"benefit\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"membership\",\"kind\":\"object\",\"type\":\"Membership\",\"relationName\":\"MembershipToMembershipBenefit\"}],\"dbName\":\"membership_benefits\"},\"MembershipUser\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"membershipId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"remainingSessions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"remainingDuration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isExpired\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isSuspended\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"suspensionReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"suspensionEndDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MembershipUserToUser\"},{\"name\":\"membership\",\"kind\":\"object\",\"type\":\"Membership\",\"relationName\":\"MembershipToMembershipUser\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"InvoiceToMembershipUser\"}],\"dbName\":\"membership_users\"},\"Class\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"organizerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"speakerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sessions\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"remaining\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"maxBookingPax\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"ageMin\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"classBookings\",\"kind\":\"object\",\"type\":\"ClassBooking\",\"relationName\":\"ClassToClassBooking\"}],\"dbName\":\"classes\"},\"ClassBooking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"totalPrice\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"processingFee\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancellationReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"class\",\"kind\":\"object\",\"type\":\"Class\",\"relationName\":\"ClassToClassBooking\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClassBookingToUser\"},{\"name\":\"details\",\"kind\":\"object\",\"type\":\"ClassBookingDetail\",\"relationName\":\"ClassBookingToClassBookingDetail\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"ClassBookingToInvoice\"}],\"dbName\":\"class_bookings\"},\"ClassBookingDetail\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classBookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"time\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"attendance\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"classBooking\",\"kind\":\"object\",\"type\":\"ClassBooking\",\"relationName\":\"ClassBookingToClassBookingDetail\"}],\"dbName\":\"class_booking_details\"},\"Club\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rules\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"leaderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"visibility\",\"kind\":\"enum\",\"type\":\"ClubVisibility\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"leader\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClubLeader\"},{\"name\":\"clubMember\",\"kind\":\"object\",\"type\":\"ClubMember\",\"relationName\":\"ClubToClubMember\"},{\"name\":\"tournamentRegistration\",\"kind\":\"object\",\"type\":\"TournamentRegistration\",\"relationName\":\"ClubToTournamentRegistration\"}],\"dbName\":\"clubs\"},\"ClubMember\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clubId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"joinedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"club\",\"kind\":\"object\",\"type\":\"Club\",\"relationName\":\"ClubToClubMember\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ClubMemberToUser\"}],\"dbName\":\"club_members\"},\"Tournament\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rules\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"maxTeams\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"teamSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"entryFee\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tournamentRegistration\",\"kind\":\"object\",\"type\":\"TournamentRegistration\",\"relationName\":\"TournamentToTournamentRegistration\"}],\"dbName\":\"tournaments\"},\"TournamentRegistration\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tournamentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"clubId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"members\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalFee\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"paymentLockedUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"cancellationReason\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tournament\",\"kind\":\"object\",\"type\":\"Tournament\",\"relationName\":\"TournamentToTournamentRegistration\"},{\"name\":\"club\",\"kind\":\"object\",\"type\":\"Club\",\"relationName\":\"ClubToTournamentRegistration\"},{\"name\":\"membersRef\",\"kind\":\"object\",\"type\":\"TournamentRegistrationMember\",\"relationName\":\"TournamentRegistrationToTournamentRegistrationMember\"},{\"name\":\"invoice\",\"kind\":\"object\",\"type\":\"Invoice\",\"relationName\":\"InvoiceToTournamentRegistration\"}],\"dbName\":\"tournament_registrations\"},\"TournamentRegistrationMember\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tournamentRegistrationId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isHost\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tournamentRegistration\",\"kind\":\"object\",\"type\":\"TournamentRegistration\",\"relationName\":\"TournamentRegistrationToTournamentRegistrationMember\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TournamentRegistrationMemberToUser\"}],\"dbName\":\"tournament_registration_members\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

