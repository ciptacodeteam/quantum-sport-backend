// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String?  @unique
  emailVerified Boolean  @default(false)
  password      String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  banned     Boolean?  @default(false)
  banReason  String?
  banExpires DateTime?

  googleId String? @unique

  phone         String   @unique
  phoneVerified Boolean?

  authTokens                   AuthToken[]
  bookings                     Booking[]
  membershipUser               MembershipUser[]
  classBooking                 ClassBooking[]
  club                         Club[]
  clubMember                   ClubMember[]
  tournamentRegistrationMember TournamentRegistrationMember[]

  @@map("user")
}

enum PhoneVerificationType {
  LOGIN
  REGISTER
  FORGOT_PASSWORD
  VERIFY_PHONE
  CHANGE_PHONE
}

model PhoneVerification {
  id        String                 @id @default(cuid())
  phone     String                 @unique
  type      PhoneVerificationType?
  code      String
  expiresAt DateTime
  requestId String
  isUsed    Boolean                @default(false)
  createdAt DateTime               @default(now())
  updatedAt DateTime               @default(now()) @updatedAt

  @@map("phone_verification")
}

enum AuthTokenType {
  STAFF
  USER
}

model Staff {
  id        String   @id @default(cuid())
  image     String?
  name      String
  email     String   @unique
  phone     String?  @unique
  password  String
  isActive  Boolean  @default(true)
  joinedAt  DateTime @default(now()) @db.Date
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  authTokens      AuthToken[]
  ballboySchedule BallboySchedule[]
  coachSchedule   CoachSchedule[]

  @@map("staff")
}

model BallboySchedule {
  id          String   @id @default(cuid())
  staffId     String
  date        DateTime @db.Date
  time        String // e.g., "08:00" 
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  staff          Staff            @relation(fields: [staffId], references: [id], onDelete: Cascade)
  bookingBallboy BookingBallboy[]

  @@map("ballboy_schedules")
}

model CoachSchedule {
  id          String   @id @default(cuid())
  staffId     String
  date        DateTime @db.Date
  time        String // e.g., "08:00"
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  staff        Staff          @relation(fields: [staffId], references: [id], onDelete: Cascade)
  bookingCoach BookingCoach[]

  @@map("coach_schedules")
}

model AuthToken {
  id               String        @id @default(cuid())
  userId           String?
  staffId          String?
  type             AuthTokenType @default(USER)
  refreshToken     String        @unique
  refreshExpiresAt DateTime
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt

  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  staff Staff? @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("auth_token")
}

enum Role {
  ADMIN
  BALLBOY
  COACH
}

model Inventory {
  id               String             @id @default(cuid())
  name             String
  description      String?
  quantity         Int                @default(0)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  bookingInventory BookingInventory[]

  @@map("inventories")
}

model Court {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  costSchedules CourtCostSchedule[]
  bookingDetail BookingDetail[]

  @@map("courts")
}

model Banner {
  id        String    @id @default(cuid())
  image     String
  link      String?
  isActive  Boolean   @default(true)
  startAt   DateTime?
  endAt     DateTime?
  sequence  Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("banners")
}

model Membership {
  id          String   @id @default(cuid())
  name        String
  description String?
  content     String?
  price       BigInt
  sessions    Int // number of sessions
  duration    Int // duration in days
  sequence    Int // for ordering
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  benefits       MembershipBenefit[]
  bookings       Booking[]
  membershipUser MembershipUser[]

  @@map("memberships")
}

model MembershipBenefit {
  id           String   @id @default(cuid())
  membershipId String
  benefit      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@map("membership_benefits")
}

model MembershipUser {
  id                String    @id @default(cuid())
  userId            String
  membershipId      String
  startDate         DateTime
  endDate           DateTime
  remainingSessions Int
  remainingDuration Int // in days
  isExpired         Boolean   @default(false)
  isSuspended       Boolean   @default(false)
  suspensionReason  String?
  suspensionEndDate DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@map("membership_users")
}

model CourtCostSchedule {
  id          String   @id @default(cuid())
  courtId     String
  date        DateTime @db.Date
  time        String // e.g., "08:00"
  price       BigInt
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  court         Court           @relation(fields: [courtId], references: [id])
  bookingDetail BookingDetail[]

  @@map("court_cost_schedules")
}

enum PaymentStatus {
  PENDING
  CANCELLED
  COMPLETED
  EXPIRED
}

model PaymentMethod {
  id        String   @id @default(cuid())
  name      String
  logo      String?
  fees      BigInt   @default(0) // in rupiah
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  bookings     Booking[]
  ClassBooking ClassBooking[]

  @@map("payment_methods")
}

model Booking {
  id                 String        @id
  userId             String
  membershipId       String?
  totalPrice         BigInt
  processingFee      BigInt        @default(0)
  paymentMethodId    String
  paymentStatus      PaymentStatus @default(PENDING)
  bookingDate        DateTime      @default(now())
  paymentDueDate     DateTime
  paymentDate        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt

  user             User               @relation(fields: [userId], references: [id])
  paymentMethod    PaymentMethod      @relation(fields: [paymentMethodId], references: [id])
  membership       Membership?        @relation(fields: [membershipId], references: [id])
  bookingDetail    BookingDetail[]
  bookingInventory BookingInventory[]
  bookingBallboy   BookingBallboy[]
  bookingCoach     BookingCoach[]

  @@map("bookings")
}

model BookingDetail {
  id         String   @id @default(cuid())
  bookingId  String
  courtId    String
  scheduleId String
  date       DateTime @db.Date
  time       String // e.g., "08:00"
  price      BigInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  booking  Booking           @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  court    Court             @relation(fields: [courtId], references: [id])
  schedule CourtCostSchedule @relation(fields: [scheduleId], references: [id])

  @@map("booking_details")
}

model BookingInventory {
  id          String   @id @default(cuid())
  bookingId   String
  inventoryId String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  booking   Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  inventory Inventory @relation(fields: [inventoryId], references: [id])

  @@map("booking_inventories")
}

model BookingBallboy {
  id                String   @id @default(cuid())
  bookingId         String
  ballboyScheduleId String
  date              DateTime @db.Date
  time              String // e.g., "08:00"
  price             BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  booking         Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  ballboySchedule BallboySchedule @relation(fields: [ballboyScheduleId], references: [id])

  @@map("booking_ballboys")
}

model BookingCoachType {
  id          String   @id @default(cuid())
  name        String
  price       BigInt
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  bookingCoach BookingCoach[]

  @@map("coach_types")
}

model BookingCoach {
  id                 String   @id @default(cuid())
  bookingId          String
  coachScheduleId    String
  date               DateTime @db.Date
  time               String // e.g., "08:00"
  price              BigInt
  bookingCoachTypeId String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  booking          Booking          @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingCoachType BookingCoachType @relation(fields: [bookingCoachTypeId], references: [id])
  coachSchedule    CoachSchedule    @relation(fields: [coachScheduleId], references: [id])

  @@map("booking_coaches")
}

enum Gender {
  MALE
  FEMALE
  ALL
}

model Class {
  id            String         @id @default(cuid())
  name          String
  description   String?
  content       String?
  organizerName String? // e.g., "Quantum Sport"
  speakerName   String? // e.g., "John Doe"
  image         String?
  startDate     DateTime       @db.Date
  endDate       DateTime       @db.Date
  startTime     String // e.g., "08:00"
  endTime       String // e.g., "09:00"
  price         BigInt // per session
  sessions      Int
  capacity      Int
  remaining     Int
  maxBookingPax Int            @default(0) // 0 means no limit
  gender        Gender         @default(ALL)
  ageMin        Int
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  classBooking  ClassBooking[]

  @@map("classes")
}

model ClassBooking {
  id                 String        @id
  classId            String
  userId             String
  totalPrice         BigInt
  processingFee      BigInt        @default(0)
  paymentMethodId    String
  paymentStatus      PaymentStatus @default(PENDING)
  cancelledAt        DateTime?
  cancellationReason String?
  bookingDate        DateTime      @default(now())
  paymentDueDate     DateTime
  paymentDate        DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt

  class              Class                @relation(fields: [classId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  paymentMethod      PaymentMethod        @relation(fields: [paymentMethodId], references: [id])
  classBookingDetail ClassBookingDetail[]

  @@map("class_bookings")
}

model ClassBookingDetail {
  id             String   @id @default(cuid())
  classBookingId String
  date           DateTime @db.Date
  time           String // e.g., "08:00"
  price          BigInt
  attendance     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  classBooking ClassBooking @relation(fields: [classBookingId], references: [id], onDelete: Cascade)

  @@map("class_booking_details")
}

enum ClubVisibility {
  PRIVATE
  PUBLIC
}

model Club {
  id          String         @id @default(cuid())
  name        String
  logo        String?
  description String?
  rules       String?
  leaderId    String
  visibility  ClubVisibility @default(PUBLIC)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt

  leader                 User                     @relation(fields: [leaderId], references: [id])
  clubMember             ClubMember[]
  tournamentRegistration TournamentRegistration[]

  @@map("clubs")
}

model ClubMember {
  id        String   @id @default(cuid())
  clubId    String
  userId    String
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  club Club @relation(fields: [clubId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clubId, userId])
  @@map("club_members")
}

model Tournament {
  id                     String                   @id @default(cuid())
  name                   String
  description            String?
  rules                  String?
  image                  String?
  startDate              DateTime                 @db.Date
  endDate                DateTime                 @db.Date
  startTime              String // e.g., "08:00"
  endTime                String // e.g., "17:00"
  maxTeams               Int
  teamSize               Int
  entryFee               BigInt
  location               String
  isActive               Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
  tournamentRegistration TournamentRegistration[]

  @@map("tournaments")
}

model TournamentRegistration {
  id                 String        @id @default(cuid())
  tournamentId       String
  clubId             String
  members            Int
  totalFee           BigInt
  paymentMethodId    String
  paymentStatus      PaymentStatus @default(PENDING)
  paymentDueDate     DateTime
  paymentDate        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  registeredAt       DateTime      @default(now())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now()) @updatedAt

  tournament                   Tournament                     @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  club                         Club                           @relation(fields: [clubId], references: [id], onDelete: Cascade)
  tournamentRegistrationMember TournamentRegistrationMember[]

  @@map("tournament_registrations")
}

model TournamentRegistrationMember {
  id                       String   @id @default(cuid())
  tournamentRegistrationId String
  userId                   String
  isHost                   Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now()) @updatedAt

  tournamentRegistration TournamentRegistration @relation(fields: [tournamentRegistrationId], references: [id], onDelete: Cascade)
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tournament_registration_members")
}
